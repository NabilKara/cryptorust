#[cfg(test)]
mod tests {
    use crate::symmetric_encryption::aes::{sub_bytes, shift_rows, mix_columns,encrypt_block};
    #[test]
    fn test_sub_bytes() {
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_sub_bytes: [u8; 16] = [
            0xd4, 0xe0, 0xb8, 0x1e,
            0x27, 0xbf, 0xb4, 0x41,
            0x11, 0x98, 0x5d, 0x52,
            0xae, 0xf1, 0xe5, 0x30,
        ];
        sub_bytes(&mut state);
        assert_eq!(expected_sub_bytes, state);
    }
    #[test]
    fn test_shift_rows_sub_bytes() {
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_state: [u8; 16] = [
            0xd4, 0xbf, 0x5d, 0x30,
            0x27, 0x98, 0xe5, 0x1e,
            0x11, 0xf1, 0xb8, 0x41,
            0xae, 0xe0, 0xb4, 0x52,
        ];

        sub_bytes(&mut state);
        shift_rows(&mut state);

        assert_eq!(expected_state, state);
    }
    #[test]
    fn test_mix_columns(){
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_state: [u8; 16] = [
            0xba, 0x1e, 0xb6, 0xd8,
            0x43, 0x67, 0x4d, 0x9e,
            0x25, 0xf8, 0xd8, 0xc1,
            0x38, 0x9e, 0xd9, 0xc8,
        ];

        mix_columns(&mut state);
        assert_eq!(expected_state, state);
    }
    #[test]
    fn test_block_encryption(){
        let state: [u8; 16] = [
            0x00, 0x11, 0x22, 0x33,
            0x44, 0x55, 0x66, 0x77,
            0x88, 0x99, 0xaa, 0xbb,
            0xcc, 0xdd, 0xee, 0xff,
        ];

        let expected_state: [u8; 16] = [
            0x69, 0xc4, 0xe0, 0xd8,
            0x6a, 0x7b, 0x04, 0x30,
            0xd8, 0xcd, 0xb7, 0x80,
            0x70, 0xb4, 0xc5, 0x5a,
        ];

        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b,
            0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let mut output = [0u8; 16];
        encrypt_block(&state, &mut output, &key);
        assert_eq!(expected_state, output);
    }
}