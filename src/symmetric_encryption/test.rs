#[cfg(test)]
mod tests {
    use aes::Aes128;
    use aes::cipher::{Block, BlockEncrypt, KeyInit};
    use crate::symmetric_encryption::aes_decryption::decrypt_block;
    use crate::symmetric_encryption::aes_encryption::{sub_bytes, shift_rows, mix_columns, encrypt_block, encrypt_ecb, encrypt_cbc, decrypt_cbc};
    #[test]
    fn test_sub_bytes() {
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_sub_bytes: [u8; 16] = [
            0xd4, 0xe0, 0xb8, 0x1e,
            0x27, 0xbf, 0xb4, 0x41,
            0x11, 0x98, 0x5d, 0x52,
            0xae, 0xf1, 0xe5, 0x30,
        ];
        sub_bytes(&mut state);
        assert_eq!(expected_sub_bytes, state);
    }
    #[test]
    fn test_shift_rows_sub_bytes() {
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_state: [u8; 16] = [
            0xd4, 0xbf, 0x5d, 0x30,
            0x27, 0x98, 0xe5, 0x1e,
            0x11, 0xf1, 0xb8, 0x41,
            0xae, 0xe0, 0xb4, 0x52,
        ];

        sub_bytes(&mut state);
        shift_rows(&mut state);

        assert_eq!(expected_state, state);
    }
    #[test]
    fn test_mix_columns(){
        let mut state: [u8; 16] = [
            0x19, 0xa0, 0x9a, 0xe9,
            0x3d, 0xf4, 0xc6, 0xf8,
            0xe3, 0xe2, 0x8d, 0x48,
            0xbe, 0x2b, 0x2a, 0x08,
        ];

        let expected_state: [u8; 16] = [
            0xba, 0x1e, 0xb6, 0xd8,
            0x43, 0x67, 0x4d, 0x9e,
            0x25, 0xf8, 0xd8, 0xc1,
            0x38, 0x9e, 0xd9, 0xc8,
        ];

        mix_columns(&mut state);
        assert_eq!(expected_state, state);
    }
    #[test]
    fn test_block_encryption(){
        let state: [u8; 16] = [
            0x00, 0x11, 0x22, 0x33,
            0x44, 0x55, 0x66, 0x77,
            0x88, 0x99, 0xaa, 0xbb,
            0xcc, 0xdd, 0xee, 0xff,
        ];

        let expected_state: [u8; 16] = [
            0x69, 0xc4, 0xe0, 0xd8,
            0x6a, 0x7b, 0x04, 0x30,
            0xd8, 0xcd, 0xb7, 0x80,
            0x70, 0xb4, 0xc5, 0x5a,
        ];

        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b,
            0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let mut output = [0u8; 16];
        encrypt_block(&state, &mut output, &key);
        assert_eq!(expected_state, output);
    }
    #[test]
    fn test_decrypt_block(){
        let state: [u8; 16] = [
            0x69, 0xc4, 0xe0, 0xd8,
            0x6a, 0x7b, 0x04, 0x30,
            0xd8, 0xcd, 0xb7, 0x80,
            0x70, 0xb4, 0xc5, 0x5a,
        ];
        let expected_state: [u8; 16] = [
            0x00, 0x11, 0x22, 0x33,
            0x44, 0x55, 0x66, 0x77,
            0x88, 0x99, 0xaa, 0xbb,
            0xcc, 0xdd, 0xee, 0xff,
        ];
        let key: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b,
            0x0c, 0x0d, 0x0e, 0x0f,
        ];
        let mut output = [0u8; 16];
        decrypt_block(&state, &mut output, &key);
        assert_eq!(expected_state, output);
    }
    // #[test]
    // fn test_encrypt_ecb() {
    //     let key = b"0123456789abcdef";
    //     let plaintext = b"Hello, AES-ECB!";
    //
    //     let ciphertext = encrypt_ecb(plaintext.to_vec(), key);
    //
    //     let expected_ciphertext = vec![
    //         0x66, 0x99, 0x7c, 0x10, 0x79, 0x7c, 0x63, 0x99,
    //         0xef, 0x3a, 0x97, 0x45, 0xf1, 0xe2, 0x92, 0xf5
    //     ];
    //
    //     assert_eq!(ciphertext, expected_ciphertext, "AES-ECB encryption failed!");
    // }
    #[test]
    fn test_cbc_encryption_decryption(){
        let key: [u8; 16] = [
            0x2b, 0x7e, 0x15, 0x16,
            0x28, 0xae, 0xd2, 0xa6,
            0xab, 0xf7, 0x15, 0x88,
            0x09, 0xcf, 0x4f, 0x3c,
        ];
        let iv: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B,
            0x0C, 0x0D, 0x0E, 0x0F,
        ];
        let plain: Vec<u8> = vec![
            0x6b, 0xc1, 0xbe, 0xe2,
            0x2e, 0x40, 0x9f, 0x96,
            0xe9, 0x3d, 0x7e, 0x11,
            0x73, 0x93, 0x17, 0x2a,
            0x6b, 0xc1, 0xbe, 0xe2,
            0x2e, 0x40, 0x9f, 0x96,
            0xe9, 0x3d, 0x7e, 0x11,
            0x73, 0x93, 0x17, 0x2a,
            0x6b, 0xc1, 0xbe, 0xe2,
            0x2e, 0x40, 0x9f, 0x96,
            0xe9, 0x3d, 0x7e, 0x11,
            0x73, 0x93, 0x17, 0x2a,
            0x6b, 0xc1, 0xbe, 0xe2,
            0x2e, 0x40, 0x9f, 0x96,
            0xe9, 0x3d, 0x7e, 0x11,
            0x73, 0x93, 0x17, 0x2a,
            0x6b, 0xc1, 0xbe, 0xe2,
            0x2e, 0x40, 0x9f, 0x96,
            0xe9, 0x3d, 0x7e, 0x11,
            0x73, 0x93, 0x17, 0x2a,
        ];
        let cipher: Vec<u8> = vec![
            0x76, 0x49, 0xab, 0xac,
            0x81, 0x19, 0xb2, 0x46,
            0xce, 0xe9, 0x8e, 0x9b,
            0x12, 0xe9, 0x19, 0x7d,
            0x4c, 0xbb, 0xc8, 0x58,
            0x75, 0x6b, 0x35, 0x81,
            0x25, 0x52, 0x9e, 0x96,
            0x98, 0xa3, 0x8f, 0x44,
            0x9f, 0x6f, 0x07, 0x96,
            0xee, 0x3e, 0x47, 0xb0,
            0xd8, 0x7c, 0x76, 0x1b,
            0x20, 0x52, 0x7f, 0x78,
            0x07, 0x01, 0x34, 0x08,
            0x5f, 0x02, 0x75, 0x17,
            0x55, 0xef, 0xca, 0x3b,
            0x4c, 0xdc, 0x7d, 0x62,
            0x1d, 0x93, 0x10, 0xca,
            0xac, 0x69, 0xe1, 0xff,
            0xee, 0xe0, 0x71, 0x20,
            0x25, 0x02, 0xfa, 0x70,
        ];

        let c = encrypt_cbc(&plain, &iv, &key);

        if c == cipher {
            println!("Encrypted matches ciphertext")
        }

        if plain == decrypt_cbc(c, &iv, &key).unwrap() {
            println!("Plaintext and decrypted match.")
        }

    }
}